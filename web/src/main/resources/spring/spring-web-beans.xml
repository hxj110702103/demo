<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

       <!-- 1.使用@Service @Repository 等注解annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
       <context:component-scan base-package="com.han.demo">
              <!--排除@Controller注解-->
              <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
       </context:component-scan>

       <!--2.定义资源属性的一个适配器，注入jdbc.property文件，这样就可以在上下文环境中${key}这种形式调用，locations可以注入多个.properties文件-->
       <bean id="propertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
              <property name="locations">
                     <list>
                            <value>classpath:jdbc.properties</value>
                     </list>
              </property>
       </bean>
       <!--另一种定义资源属性的适配器的形式-->
       <!--<context:property-placeholder ignore-unresolvable="true" location="classpath:jdbc.properties" />-->

       <!--3.定义dataSource数据源-->
       <bean id="localdatasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
              <!--com.mysql.jdbc.Driver，需添加mysql-connector-java的jar包-->
              <property name="driverClassName" value="${jdbc.driver}"></property>
              <property name="url" value="${jdbc.url}"></property>
              <property name="username" value="${jdbc.username}"></property>
              <property name="password" value="${jdbc.password}"></property>
       </bean>

       <!--4.jdbc连接的两种方式①②////////////////////////////////////////////////////////////////////开始开始开始/////////////////////////////////////////////////////////////////////-->
       <!--①使用普通的JdbcConnect连接数据库-->
       <bean id="connect" class="com.han.demo.common.JdbcConnect">
              <constructor-arg ref="localdatasource"/>
       </bean>

       <!--②使用JdbcTemplate连接数据库-->
       <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
              <property name="dataSource" ref="localdatasource"></property>
       </bean>
       <!--jdbc连接的两种方式①②////////////////////////////////////////////////////////////////////结束结束结束/////////////////////////////////////////////////////////////////////-->

       <!--5.使用ibatis和spring整合////////////////////////////////////////////////////////////////////开始开始开始/////////////////////////////////////////////////////////////////////-->
       <bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
              <property name="configLocation" value="ibatis/SqlMapConfig.xml"/>
              <property name="dataSource" ref="localdatasource"/>
       </bean>

       <bean id="userDao" class="com.han.demo.user.dao.ibatis.impl.UserDaoImpl">
              <property name="sqlMapClient" ref="sqlMapClient" />
       </bean>
       <!--使用ibatis和spring整合////////////////////////////////////////////////////////////////////结束结束结束/////////////////////////////////////////////////////////////////////-->

       <!--6.使用mybatis和spring整合////////////////////////////////////////////////////////////////////开始开始开始/////////////////////////////////////////////////////////////////////-->
       <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
              <property name="dataSource" ref="localdatasource"/>
              <property name="mapperLocations" value="classpath:mapper/*/*.xml"/>
       </bean>
       <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
              <!--查找类路径下的映射器并自动将它们创建成MapperFactoryBean-->
              <property name="basePackage" value="com.han.demo.user.dao.mybatis"/>
              <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
       </bean>
       <!--使用mybatis和spring整合////////////////////////////////////////////////////////////////////结束结束结束/////////////////////////////////////////////////////////////////////-->

       <!--7.事务配置///////////////////////////////////////////////////////////////////////////////////////开始开始开始////////////////////////////////////////////////////////////////////////////////////////-->
       <!--Spring关于事务的配置由三个组成部分：dataSource、transactionManager、代理机制
       （前两部分都一样，代理机制有不同的选择方案：如代理，拦截器，aop和tx标签配置②，全注解①）/-->
       <!--定义事务管理器（声明式事务）-->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
              <property name="dataSource" ref="localdatasource"/>
       </bean>
       <!--①代理机制一：即全注解形式,事务注解驱动-->
       <tx:annotation-driven transaction-manager="transactionManager"/>

       <!--②代理机制二：aop和tx标签配置-->
       <aop:config>
              <aop:pointcut id="serviceMethod" expression="execution(* com.han.demo.*.service.impl.*(..))" />
              <aop:advisor advice-ref="txadvice" pointcut-ref="serviceMethod"/>
       </aop:config>
       <tx:advice id="txadvice" transaction-manager="transactionManager">
              <tx:attributes>
                     <!-- 指定哪些方法需要加入事务，可以使用通配符来只加入需要的方法 -->
                     <tx:method name="*" propagation="REQUIRED" read-only="true"/>
                     <tx:method name="update" propagation="REQUIRED"/>
                     <tx:method name="create" propagation="REQUIRED"/>
                     <tx:method name="insert" propagation="REQUIRED"/>
                     <tx:method name="delete" propagation="REQUIRED"/>
              </tx:attributes>
       </tx:advice>
       <!--事务配置///////////////////////////////////////////////////////////////////////////////////////结束结束结束////////////////////////////////////////////////////////////////////////////////////////-->
       <!--ehcache缓存配置///////////////////////////////////////////////////////////////////////////////////////开始开始开始////////////////////////////////////////////////////////////////////////////////////////-->
       <!-- cacheManager工厂类，指定ehcache.xml的位置 -->
       <bean id="cache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
              <property name="configLocation" value="classpath:cache/ehcache.xml"></property>
       </bean>
       <!-- 声明cacheManager -->
       <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
              <property name="cacheManager" ref="cache"></property>
       </bean>
       <!--缓存注解的驱动-->
       <cache:annotation-driven cache-manager="cacheManager"/>
       <!--ehcache缓存配置///////////////////////////////////////////////////////////////////////////////////////结束结束结束////////////////////////////////////////////////////////////////////////////////////////-->
</beans>